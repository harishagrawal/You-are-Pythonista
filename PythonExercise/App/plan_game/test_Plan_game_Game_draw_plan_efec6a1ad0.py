# ********RoostGPT********
"""
Test generated by RoostGPT for test py-vertex- using AI Type Vertex AI and AI Model code-bison-32k

 **Test Scenario 1**: Validate that the function correctly draws the plane on the screen.

**Test Steps**:
1. Create a new Game object.
2. Create a new Plane object and add it to the game.
3. Call the draw_plan() function on the game object, passing in the plane object and the time passed since the last draw.
4. Verify that the plane is drawn on the screen at the correct position.

**Expected Result**:
The plane is drawn on the screen at the correct position.

**Test Scenario 2**: Validate that the function correctly shows the plane's destroy animation when the plane starts to self-destruct.

**Test Steps**:
1. Create a new Game object.
2. Create a new Plane object and add it to the game.
3. Set the plane's start_destroy attribute to True.
4. Call the draw_plan() function on the game object, passing in the plane object and the time passed since the last draw.
5. Verify that the plane's destroy animation is shown on the screen.

**Expected Result**:
The plane's destroy animation is shown on the screen.

**Test Scenario 3**: Validate that the function correctly handles the case where the time passed since the last draw is greater than the destroy time.

**Test Steps**:
1. Create a new Game object.
2. Create a new Plane object and add it to the game.
3. Set the plane's start_destroy attribute to True.
4. Call the draw_plan() function on the game object, passing in the plane object and a time passed that is greater than the destroy time.
5. Verify that the plane is removed from the game.

**Expected Result**:
The plane is removed from the game.
"""

# ********RoostGPT********
import pytest
import pygame
import sys
import os
import random
from plan_game import Game

# TODO: Add the path to the source directory here
source_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)),
    'material_images')

# TODO: Change the background image path as per your system
background_image_path = os.path.join(source_dir, 'background.png')

def test_draw_plan_normal_scenario():
    """
    Test Scenario 1: Validate that the function correctly draws the plane on the screen.
    """
    # Create a new Game object
    game = Game(background_image_path)

    # Create a new Plane object and add it to the game
    plan = Plan()
    game.enemies.append(plan)

    # Set the time passed since the last draw to a small value
    time_passed = 10

    # Call the draw_plan() function on the game object
    game.draw_plan(plan, time_passed)

    # Verify that the plane is drawn on the screen at the correct position
    assert plan.position == [(game.size[0]-plan.image_size[0]) / 2, 500]

def test_draw_plan_destroy_animation():
    """
    Test Scenario 2: Validate that the function correctly shows the plane's destroy animation when the plane starts to self-destruct.
    """
    # Create a new Game object
    game = Game(background_image_path)

    # Create a new Plane object and add it to the game
    plan = Plan()
    game.enemies.append(plan)

    # Set the plane's start_destroy attribute to True
    plan.start_destroy = True

    # Set the time passed since the last draw to a small value
    time_passed = 10

    # Call the draw_plan() function on the game object
    game.draw_plan(plan, time_passed)

    # Verify that the plane's destroy animation is shown on the screen
    assert plan.destroy_image_position == 0

def test_draw_plan_destroy_time_exceeded():
    """
    Test Scenario 3: Validate that the function correctly handles the case where the time passed since the last draw is greater than the destroy time.
    """
    # Create a new Game object
    game = Game(background_image_path)

    # Create a new Plane object and add it to the game
    plan = Plan()
    game.enemies.append(plan)

    # Set the plane's start_destroy attribute to True
    plan.start_destroy = True

    # Set the time passed since the last draw to a value greater than the destroy time
    time_passed = 1000

    # Call the draw_plan() function on the game object
    game.draw_plan(plan, time_passed)

    # Verify that the plane is removed from the game
    assert plan not in game.enemies

