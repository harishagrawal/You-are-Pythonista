# ********RoostGPT********
"""
Test generated by RoostGPT for test py-openai using AI Type Open AI and AI Model gpt-4

1. Scenario: Validate if the `draw_plan` function is calling the `show_destroy_animation` method when `start_destroy` is True.
   - Given the `plan` object with `start_destroy` is True.
   - When the `draw_plan` function is called with this `plan`.
   - Then the `show_destroy_animation` method should be called.

2. Scenario: Check if the `draw_plan` function is not calling the `show_destroy_animation` method when `start_destroy` is False.
   - Given the `plan` object with `start_destroy` is False.
   - When the `draw_plan` function is called with this `plan`.
   - Then the `show_destroy_animation` method should not be called.

3. Scenario: Verify if the `draw_plan` function is correctly rendering the image at the given position.
   - Given the `plan` object with specific `image` and `position`.
   - When the `draw_plan` function is called with this `plan`.
   - Then the `image` should be rendered at the given `position`.

4. Scenario: Check if the `draw_plan` function is correctly passing `time_passed` and `destroy_time` to `show_destroy_animation` method.
   - Given the `plan` object with `start_destroy` is True and a specific `time_passed`.
   - When the `draw_plan` function is called with this `plan`.
   - Then the `show_destroy_animation` method should be called with the given `time_passed` and `destroy_time` of 1000.

5. Scenario: Validate if the `draw_plan` function is handling the case when the `plan` object is None.
   - Given the `plan` object is None.
   - When the `draw_plan` function is called with this `plan`.
   - Then the function should handle this case appropriately without throwing errors.

6. Scenario: Check if the `draw_plan` function is handling the case when the `time_passed` is None.
   - Given a `plan` object and `time_passed` is None.
   - When the `draw_plan` function is called with this `plan`.
   - Then the function should handle this case appropriately without throwing errors.
"""

# ********RoostGPT********
import pytest
from unittest.mock import Mock, call
from plan_game import Game

# Create a fixture to setup common test objects
@pytest.fixture
def setup_game():
    game = Game(background_image_path='background.png')
    plan = Mock()
    return game, plan

# Scenario 1
def test_draw_plan_start_destroy_true(setup_game):
    game, plan = setup_game
    plan.start_destroy = True

    game.draw_plan(plan, 500)

    # Verify that show_destroy_animation is called when start_destroy is True
    plan.show_destroy_animation.assert_called_once_with(500, destroy_time=1000)

# Scenario 2
def test_draw_plan_start_destroy_false(setup_game):
    game, plan = setup_game
    plan.start_destroy = False

    game.draw_plan(plan, 500)

    # Verify that show_destroy_animation is not called when start_destroy is False
    plan.show_destroy_animation.assert_not_called()

# Scenario 3
def test_draw_plan_image_rendered(setup_game):
    game, plan = setup_game
    plan.image = Mock()
    plan.position = (10, 20)

    game.draw_plan(plan, 500)

    # Verify that the image is rendered at the given position
    game.screen.blit.assert_called_once_with(plan.image, plan.position)

# Scenario 4
def test_draw_plan_time_passed_and_destroy_time_passed_to_show_destroy_animation(setup_game):
    game, plan = setup_game
    plan.start_destroy = True

    game.draw_plan(plan, 500)

    # Verify that show_destroy_animation is called with the correct time_passed and destroy_time
    plan.show_destroy_animation.assert_called_once_with(500, destroy_time=1000)

# Scenario 5
def test_draw_plan_plan_is_none(setup_game):
    game, _ = setup_game

    # Call draw_plan with plan as None and check if it handles the scenario without any error
    try:
        game.draw_plan(None, 500)
    except Exception as e:
        pytest.fail(f"draw_plan() raised {type(e).__name__} unexpectedly!")

# Scenario 6
def test_draw_plan_time_passed_is_none(setup_game):
    game, plan = setup_game

    # Call draw_plan with time_passed as None and check if it handles the scenario without any error
    try:
        game.draw_plan(plan, None)
    except Exception as e:
        pytest.fail(f"draw_plan() raised {type(e).__name__} unexpectedly!")
