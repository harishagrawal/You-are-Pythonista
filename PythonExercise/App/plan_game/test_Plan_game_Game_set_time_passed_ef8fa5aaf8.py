# ********RoostGPT********
"""
Test generated by RoostGPT for test py-vertex- using AI Type Vertex AI and AI Model code-bison-32k

 **Test Scenarios**

**1. Set time passed to a positive value.**
- **Test Data**: `time_passed = 100`
- **Expected Result**: `self.time_passed` should be set to 100.

**2. Set time passed to a negative value.**
- **Test Data**: `time_passed = -100`
- **Expected Result**: `self.time_passed` should remain unchanged.

**3. Set time passed to zero.**
- **Test Data**: `time_passed = 0`
- **Expected Result**: `self.time_passed` should be set to 0.

**4. Set time passed to a non-numeric value.**
- **Test Data**: `time_passed = "Hello"`
- **Expected Result**: `TypeError` should be raised.

**5. Set time passed to a value greater than the maximum allowed.**
- **Test Data**: `time_passed = 1000000`
- **Expected Result**: `ValueError` should be raised.
"""

# ********RoostGPT********
import pytest
from plan_game import Game

# Test 1: Set time passed to a positive value.
def test_set_time_passed_positive():
    # Create a Game object.
    game = Game("background.png")

    # Set the time passed to a positive value.
    game.set_time_passed(100)

    # Assert that self.time_passed is set to the correct value.
    assert game.time_passed == 100

# Test 2: Set time passed to a negative value.
def test_set_time_passed_negative():
    # Create a Game object.
    game = Game("background.png")

    # Set the time passed to a negative value.
    game.set_time_passed(-100)

    # Assert that self.time_passed remains unchanged.
    assert game.time_passed == 0

# Test 3: Set time passed to zero.
def test_set_time_passed_zero():
    # Create a Game object.
    game = Game("background.png")

    # Set the time passed to zero.
    game.set_time_passed(0)

    # Assert that self.time_passed is set to zero.
    assert game.time_passed == 0

# Test 4: Set time passed to a non-numeric value.
def test_set_time_passed_non_numeric():
    # Create a Game object.
    game = Game("background.png")

    # Set the time passed to a non-numeric value.
    with pytest.raises(TypeError):
        game.set_time_passed("Hello")

# Test 5: Set time passed to a value greater than the maximum allowed.
def test_set_time_passed_greater_than_max():
    # Create a Game object.
    game = Game("background.png")

    # Set the time passed to a value greater than the maximum allowed.
    with pytest.raises(ValueError):
        game.set_time_passed(1000000)

