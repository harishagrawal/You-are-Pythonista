# ********RoostGPT********
"""
Test generated by RoostGPT for test py-vertex- using AI Type Vertex AI and AI Model code-bison-32k

 **Test Scenario 1: Normal Scenario**
- Objective: To verify that the background image is drawn correctly and moves downwards smoothly.
- Input: 
 - `self.every_ms_move_distance` = 5
 - `self.time_passed` = 1000 (1 second)
 - `self.height` = 0
 - `self.size` = (800, 600)
- Expected Output: 
 - The background image should be drawn at (0, 0) and (0, -600).
 - The background image should move downwards smoothly by 5 pixels per millisecond.
 - After 1 second, the background image should have moved downwards by 5000 pixels.

**Test Scenario 2: Edge Case - Background Image Exceeds Window Height**
- Objective: To verify that the background image is reset to zero when it exceeds the window height.
- Input: 
 - `self.every_ms_move_distance` = 5
 - `self.time_passed` = 1000 (1 second)
 - `self.height` = 595
 - `self.size` = (800, 600)
- Expected Output: 
 - The background image should be drawn at (0, -5) and (0, 595).
 - After 1 second, the background image should have moved downwards by 5000 pixels.
 - The background image should be reset to zero and drawn at (0, 0) and (0, -600).

**Test Scenario 3: Boundary Case - Background Image Exactly Reaches Window Height**
- Objective: To verify that the background image is reset to zero when it exactly reaches the window height.
- Input: 
 - `self.every_ms_move_distance` = 5
 - `self.time_passed` = 1000 (1 second)
 - `self.height` = 600
 - `self.size` = (800, 600)
- Expected Output: 
 - The background image should be drawn at (0, 0) and (0, -600).
 - After 1 second, the background image should have moved downwards by 5000 pixels.
 - The background image should be reset to zero and drawn at (0, 0) and (0, -600).
"""

# ********RoostGPT********
import pygame
import sys
import os
import random
from plan_game import Game

# TODO: Change the background_image_path to a valid path on your system
background_image_path = 'path/to/background.png'

def test_draw_background_normal_scenario():
    # Arrange
    game = Game(background_image_path, size=(800, 600))
    game.every_ms_move_distance = 5
    game.time_passed = 1000
    game.height = 0

    # Act
    game.draw_background()

    # Assert
    assert game.screen.get_at((0, 0)) == (0, 0, 0)
    assert game.screen.get_at((0, -600)) == (0, 0, 0)
    assert game.height == 5000

def test_draw_background_edge_case():
    # Arrange
    game = Game(background_image_path, size=(800, 600))
    game.every_ms_move_distance = 5
    game.time_passed = 1000
    game.height = 595

    # Act
    game.draw_background()

    # Assert
    assert game.screen.get_at((0, -5)) == (0, 0, 0)
    assert game.screen.get_at((0, 595)) == (0, 0, 0)
    assert game.height == 0

def test_draw_background_boundary_case():
    # Arrange
    game = Game(background_image_path, size=(800, 600))
    game.every_ms_move_distance = 5
    game.time_passed = 1000
    game.height = 600

    # Act
    game.draw_background()

    # Assert
    assert game.screen.get_at((0, 0)) == (0, 0, 0)
    assert game.screen.get_at((0, -600)) == (0, 0, 0)
    assert game.height == 0
