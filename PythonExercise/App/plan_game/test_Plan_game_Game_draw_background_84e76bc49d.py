# ********RoostGPT********
"""
Test generated by RoostGPT for test py-openai using AI Type Open AI and AI Model gpt-4

1. Scenario: Test when the move_distance is zero.
- Expected: The height remains unchanged. The background does not move.

2. Scenario: Test when the move_distance is less than the window's height.
- Expected: The height increases by the move_distance. The background moves downwards.

3. Scenario: Test when the move_distance is equal to the window's height.
- Expected: The height resets to zero. The background appears to have completed a full cycle of scrolling.

4. Scenario: Test when the move_distance is more than the window's height.
- Expected: The height resets to zero. The background appears to have completed a full cycle of scrolling and started another.

5. Scenario: Test when the height is less than the window's height after being increased.
- Expected: The height remains as the new value. The background moves downwards.

6. Scenario: Test when the height is equal to the window's height after being increased.
- Expected: The height resets to zero. The background appears to have completed a full cycle of scrolling.

7. Scenario: Test when the height is more than the window's height after being increased.
- Expected: The height resets to zero. The background appears to have completed a full cycle of scrolling and started another.

8. Scenario: Test the background continuity by checking the display of two background images.
- Expected: Two images are displayed, one starting where the other ends, creating a continuous scrolling effect.

9. Scenario: Test if the function can handle multiple consecutive calls without breaking or slowing down the game.
- Expected: The function should be able to handle multiple calls without causing any issues. 

10. Scenario: Test if the function is able to resume the game from the correct position after a pause or interruption.
- Expected: The game should resume from the exact position it was paused or interrupted.
"""

# ********RoostGPT********
import pytest
from unittest.mock import Mock
from pygame import Surface
from plan_game import Game

@pytest.fixture
def game():
    game = Game(background_image_path='background.png')
    game.background = Mock(spec=Surface)
    return game

def test_move_distance_zero(game):
    game.time_passed = 0
    initial_height = game.height
    game.draw_background()
    assert game.height == initial_height

def test_move_distance_less_than_window_height(game):
    game.time_passed = 1
    game.height = 0
    game.every_ms_move_distance = game.size[1] - 1
    game.draw_background()
    assert game.height == game.size[1] - 1

def test_move_distance_equal_to_window_height(game):
    game.time_passed = 1
    game.height = 0
    game.every_ms_move_distance = game.size[1]
    game.draw_background()
    assert game.height == 0

def test_move_distance_more_than_window_height(game):
    game.time_passed = 1
    game.height = 0
    game.every_ms_move_distance = game.size[1] + 1
    game.draw_background()
    assert game.height == 0

def test_height_less_than_window_height_after_increase(game):
    game.time_passed = 1
    game.height = 0
    game.every_ms_move_distance = game.size[1] - 1
    game.draw_background()
    assert game.height == game.size[1] - 1

def test_height_equal_to_window_height_after_increase(game):
    game.time_passed = 1
    game.height = 0
    game.every_ms_move_distance = game.size[1]
    game.draw_background()
    assert game.height == 0

def test_height_more_than_window_height_after_increase(game):
    game.time_passed = 1
    game.height = 0
    game.every_ms_move_distance = game.size[1] + 1
    game.draw_background()
    assert game.height == 0

def test_background_continuity(game):
    game.background.blit = Mock()
    game.draw_background()
    assert game.background.blit.call_count == 2

def test_multiple_consecutive_calls(game):
    game.background.blit = Mock()
    for _ in range(100):
        game.draw_background()
    assert game.background.blit.call_count == 200

def test_resume_game_after_pause(game):
    game.time_passed = 0
    game.height = 100
    game.draw_background()
    assert game.height == 100
