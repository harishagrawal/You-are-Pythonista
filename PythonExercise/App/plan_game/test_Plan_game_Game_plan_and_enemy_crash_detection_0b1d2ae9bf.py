# ********RoostGPT********
"""
Test generated by RoostGPT for test py-vertex- using AI Type Vertex AI and AI Model code-bison-32k

 **Test Scenario 1: No collision**
- Arrange:
  - Create a Game object with a plan and several enemies.
  - Position the plan and enemies so that they are not colliding.
- Act:
  - Call the `plan_and_enemy_crash_detection` method on the Game object.
- Assert:
  - The plan's `start_destroy` attribute should be False.

**Test Scenario 2: Collision with enemy on the right**
- Arrange:
  - Create a Game object with a plan and several enemies.
  - Position the plan and an enemy so that they are colliding on the right side.
- Act:
  - Call the `plan_and_enemy_crash_detection` method on the Game object.
- Assert:
  - The plan's `start_destroy` attribute should be True.

**Test Scenario 3: Collision with enemy on the left**
- Arrange:
  - Create a Game object with a plan and several enemies.
  - Position the plan and an enemy so that they are colliding on the left side.
- Act:
  - Call the `plan_and_enemy_crash_detection` method on the Game object.
- Assert:
  - The plan's `start_destroy` attribute should be True.

**Test Scenario 4: Collision with enemy above**
- Arrange:
  - Create a Game object with a plan and several enemies.
  - Position the plan and an enemy so that they are colliding above.
- Act:
  - Call the `plan_and_enemy_crash_detection` method on the Game object.
- Assert:
  - The plan's `start_destroy` attribute should be False.

**Test Scenario 5: Collision with enemy below**
- Arrange:
  - Create a Game object with a plan and several enemies.
  - Position the plan and an enemy so that they are colliding below.
- Act:
  - Call the `plan_and_enemy_crash_detection` method on the Game object.
- Assert:
  - The plan's `start_destroy` attribute should be False.

**Test Scenario 6: Collision with enemy with allow_crash_size**
- Arrange:
  - Create a Game object with a plan and several enemies.
  - Position the plan and an enemy so that they are colliding on the right side, but the collision is within the allow_crash_size.
- Act:
  - Call the `plan_and_enemy_crash_detection` method on the Game object, passing in the allow_crash_size.
- Assert:
  - The plan's `start_destroy` attribute should be False.
"""

# ********RoostGPT********
import pytest
from plan_game import Game
import pygame
import sys
import os
import random

source_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'material_images')
pygame.init()
pygame.display.init()
pygame.font.init()

def test_no_collision():
    """Test Scenario 1: No collision"""
    # Arrange
    game = Game(background_image_path=os.path.join(source_dir, 'background.png'))
    plan = Plan()
    enemy = Enemy()
    enemy.position = [50, 50]

    # Act
    game.plan_and_enemy_crash_detection(plan)

    # Assert
    assert plan.start_destroy == False


def test_collision_with_enemy_on_the_right():
    """Test Scenario 2: Collision with enemy on the right"""
    # Arrange
    game = Game(background_image_path=os.path.join(source_dir, 'background.png'))
    plan = Plan()
    enemy = Enemy()
    enemy.position = [plan.position[0] + plan.image_size[0] - 1, plan.position[1]]

    # Act
    game.plan_and_enemy_crash_detection(plan)

    # Assert
    assert plan.start_destroy == True


def test_collision_with_enemy_on_the_left():
    """Test Scenario 3: Collision with enemy on the left"""
    # Arrange
    game = Game(background_image_path=os.path.join(source_dir, 'background.png'))
    plan = Plan()
    enemy = Enemy()
    enemy.position = [plan.position[0] - enemy.image.get_size()[0] + 1, plan.position[1]]

    # Act
    game.plan_and_enemy_crash_detection(plan)

    # Assert
    assert plan.start_destroy == True


def test_collision_with_enemy_above():
    """Test Scenario 4: Collision with enemy above"""
    # Arrange
    game = Game(background_image_path=os.path.join(source_dir, 'background.png'))
    plan = Plan()
    enemy = Enemy()
    enemy.position = [plan.position[0], plan.position[1] - enemy.image.get_size()[1] + 1]

    # Act
    game.plan_and_enemy_crash_detection(plan)

    # Assert
    assert plan.start_destroy == False


def test_collision_with_enemy_below():
    """Test Scenario 5: Collision with enemy below"""
    # Arrange
    game = Game(background_image_path=os.path.join(source_dir, 'background.png'))
    plan = Plan()
    enemy = Enemy()
    enemy.position = [plan.position[0], plan.position[1] + plan.image_size[1] - 1]

    # Act
    game.plan_and_enemy_crash_detection(plan)

    # Assert
    assert plan.start_destroy == False


def test_collision_with_enemy_with_allow_crash_size():
    """Test Scenario 6: Collision with enemy with allow_crash_size"""
    # Arrange
    game = Game(background_image_path=os.path.join(source_dir, 'background.png'))
    plan = Plan()
    enemy = Enemy()
    enemy.position = [plan.position[0] + plan.image_size[0] - 10, plan.position[1]]

    # Act
    game.plan_and_enemy_crash_detection(plan, allow_crash_size=10)

    # Assert
    assert plan.start_destroy == False

